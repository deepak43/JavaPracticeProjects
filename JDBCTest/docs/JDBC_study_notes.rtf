{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;}
{\*\expandedcolortbl;;\csgenericrgb\c24706\c49804\c37255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19060\viewh14180\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 JDBC:\
\
1. JDBC converts java statements into database understandable SQL statements.\
2. JDBC will pass data to driver which will pass data to database.\
3. Database vendors will provide drivers.\
4. JDBC architecture - application layer and database layer\
5. Java application and JDBC will come under application layer while driver and database will come under database layer.\
6. Driver will convert java statements to sql statements\
\
\
\
Types of drivers -\
1. JDBC-ODBC bridge driver\
2. Native-API\
3. Network-third party\
4. Pure java driver (thin driver)\
\
\
\
\
Type-1 driver\
==========\
\
Java app -> JDBC -> ODBC -> DB\
\
Java application will send data to JDBC. JDBC will pass data to ODBC application, ODBC application will convert data to open database connectivity calls. These open database connectivity calls are understandable to all databases. \
\
Along with java application and database application, client need to install one more application that is ODBC application. Microsoft by default provides ODBC application with os. \
\
This driver is useful only for standalone applications.\
\
How to use? ->\
\
- Create data source in ODBC application\
        In window, go to control panel -> ODBC setup -> create new datasource (ds). While creating It will ask for - \
               Data source name -  ds\
               (db) TNS service -  xe\
               Userid - \
               Password - \
                           \
- Configure same data source in java application.\
         In your class  - \
         //load driver. rt.jar will have this driver\
         Class.forName(\'93sun.jdbc.odbc.jdbcOdbcDriver\'94);\
\
        //get connection\
        Connection con = DriverManager.getConnection(\'93jdbc:odbc:ds\'94,\'94username\'94,\'94password\'94);\
\
        //execute statements \
         Statement st = conn.createStatement();\
         st.executeUpdate(\'93\'85\'85.\'94);\
\
Datasource is always local to client system so its applicable to standalone applications.\
\
\
\
\
Type-2 driver\
==========\
\
Java app -> JDBC -> vendor specific driver -> DB\
\
Driver will talk database native functions directly.  Database vendors provides this type of driver. \
\
It provides better performance compare to Type-1 driver but less performance compare to Type-4 driver. It can be used for standalone as well as remote db access. \
\
\
\
\
Type-3 driver\
==========\
\
Java application -> Database application server -> DB\
\
A separate database application server is needed. Java application need to make call on db app server which will pass queries to database. \
\
Here, two dependancies - Client need database application server jar.  While DB application server need db vendor specific jar. \
\
Can be used for standalone as well as remote DB access. \
\
E.g. WebLogic, IDS are DB app servers\
\
\
\
\
\
Type-4 driver\
==========\
\
Java application \'97\'97protocol\'97\'97\'97\'97> DB\
\
No need of any third party support. It\'92s protocol specific driver. When java application want to talk to any DB, DB vendor will choose one type of protocol. Java application need to make call on DB using that particular protocol.  Client needs database vendor protocol specific jar. \
\
It is recommended for enterprise applications. These are pure java and lightweight drivers. Internally java use RMI calls.\
\
\
\
\
\
\
\
\
Different classes and Interfaces :\
======================== \
\
1. DriverManager (C)  - To register drivers and get connection\
2. Driver (I) - every DB vendor must need to implement this interface\
3. Connection (I) - useful to get connection from DB\
4. Statement (I) - useful to pass sql statements to DB\
5. SQLException (C) - useful to understand DB level exceptions\
6. ResultSet (I) - useful to iterate data which is coming from database\
\
\
\
\
\
Steps to connect DB and execute SQL statements:\
======================================\
\
Step - 1: Load driver implementation into JVM\
      There are 3 ways\
       i. Class.forName(driver implementation class).  \
                 E.g. - Class.forName(\'93sun.jdbc.odbc.JdbcOdbcDriver\'94);\
\
         OR\
\
     ii. DriverManager.registerDriver(driver instance)\
             e.g. - \
                     Driver d = new JdbcOdbcDriver();\
                     DriverManager.registerDriver(d);\
\
   OR\
\
     iii. Using system properties. From command line interface \
                 java -Djdbc.drivers=\'93sun.jdbc.odbc.JdbcOdbcDriver\'94 ApplicationName\
\
Step - 2 : Get connection\
       There are 3 ways\
       i. DriverManager.getConnection(\'93url\'94);    OR\
      ii. DriverManager.getConnection(\'93url\'94, \'93username\'94, \'93password\'94);  OR\
     iii. DriverManager.getConnection(\'93url\'94, \'93properties\'94)\
\
Step - 3 : Create statements\
       There are 3 ways\
          i.  Using statement\
                         Statement st = conn.createStatement();\
         ii. Using preparedStatement\
                         PreparedStatement pst = conn.prepareStatement(sql statement);\
         iii. Using callable statement\
                        CallableStatement cst = conn.callableStatement();\
\
Step - 4 : Execute SQL statements\
        I. Using statement\
              Statement st = conn.createStatement();\
                 st.execute(DDL);   // data definition language - create/alter/drop/truncate/rename table\
                 st.executeUpdate(DML); // data  - insert/update/delete record\
                 st.executeQuery(DRL)  // data retrieval - select records\
\
       II. Using prepared statement\
                pst.execute();\
                pst.executeUpdate();\
                pst.executeQuery();\
\
      III. Using callable statement - useful for executing procedures or functions \
\
      iv. conn.setAutoCommit() is by default true. But if its false then you need to commit your changes to insert those into DB permanently. Only for DML statements.\
                conn.commit();  \
               \
Step - 5 : Read data from DB\
            ResultSet can be used to iterate data coming from DB. \
            When any select query made, DB sends data in ResultSet\
\
Step - 6 : Handle exceptions\
        JDBC statements will throw compile time exception. i.e. Checked exceptions.\
        SQLException\
\
\
\
\
\
\
\
\
*****************************************************************************************************************************************************************************************\
\
MySql Help - \
\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 Commands from terminal :\cf0 \
\cf2 		    		  \
    To connect to mysql 		: 		\ul mysql\ulnone  -u root -p\
    To see all databases 	: 		show databases;\
    To select particular DB 	: 		use <db_name>;\
    To see all tables 		: 		show tables;\
    To see details of table 	: 		describe <table_name>;\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 *****************************************************************************************************************************************************************************************
\f1 \cf2 \
}